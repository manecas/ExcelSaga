/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;
import presenter.IFilterPresenter;

/**
 *
 * @author Luis
 */
public class FilterView extends javax.swing.JFrame implements IFilterView {

    /**
     * Creates new form FilterView
     */ 
    private int xx;
    private int yy;
    private int x;
    private int y;
    private boolean windowLoading;
    private IFilterPresenter filterPresenter;
    
    public FilterView() {
        initComponents();
        windowLoading = false;
        
        upperCheckbox.addItemListener((ItemEvent e) -> {
            if(windowLoading){
                return;
            }
            
            if(e.getStateChange() == ItemEvent.SELECTED){
                filterPresenter.onUpperSelected();
            }else{
                filterPresenter.onUpperDeselected();
            }
        });
        
        positiveCheckbox.addItemListener((ItemEvent e) -> {
            if(windowLoading){
                return;
            }
            
            if(e.getStateChange() == ItemEvent.SELECTED){
                filterPresenter.onPositiveSelected();
            }else{
                filterPresenter.onPositiveDeselected();
            }
        });
        
        negativeCheckbox.addItemListener((ItemEvent e) -> {
            if(windowLoading){
                return;
            }
            
            if(e.getStateChange() == ItemEvent.SELECTED){
                filterPresenter.onNegativeSelected();
            }else{
                filterPresenter.onNegativeDeselected();
            }
        });
        
        superiorCheckbox.addItemListener((ItemEvent e) -> {
            if(windowLoading){
                return;
            }
            
            if(e.getStateChange() == ItemEvent.SELECTED){
                filterPresenter.onSuperiorSelected();
            }else{
                filterPresenter.onSuperiorDeselected();
            }
        });
        
        equalCheckbox.addItemListener((ItemEvent e) -> {
            if(windowLoading){
                return;
            }
            
            if(e.getStateChange() == ItemEvent.SELECTED){
                filterPresenter.onEqualSelected();
            }else{
                filterPresenter.onEqualDeselected();
            }
        });
        
        inferiorCheckbox.addItemListener((ItemEvent e) -> {
            if(windowLoading){
                return;
            }
            
            if(e.getStateChange() == ItemEvent.SELECTED){
                filterPresenter.onInferiorSelected();
            }else{
                filterPresenter.onInferiorDeselected();
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        headerPanel = new javax.swing.JPanel();
        exitButton = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        topPanel = new javax.swing.JPanel();
        upperCheckbox = new javax.swing.JCheckBox();
        midPanel = new javax.swing.JPanel();
        positiveCheckbox = new javax.swing.JCheckBox();
        negativeCheckbox = new javax.swing.JCheckBox();
        bottomPanel = new javax.swing.JPanel();
        superiorCheckbox = new javax.swing.JCheckBox();
        equalCheckbox = new javax.swing.JCheckBox();
        inferiorCheckbox = new javax.swing.JCheckBox();
        parameterText = new javax.swing.JTextField();
        parameterLabel = new javax.swing.JLabel();
        comparisonSeparator = new javax.swing.JSeparator();
        confirmButton = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setLocationByPlatform(true);
        setUndecorated(true);

        headerPanel.setBackground(new java.awt.Color(1, 198, 83));
        headerPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                onHeaderDragged(evt);
            }
        });
        headerPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                onHeaderPressed(evt);
            }
        });
        headerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        exitButton.setBackground(new java.awt.Color(1, 198, 83));
        exitButton.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        exitButton.setForeground(new java.awt.Color(255, 255, 255));
        exitButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        exitButton.setText("X");
        exitButton.setOpaque(true);
        exitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                exitButtononExitClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                exitButtononExitPressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                exitButtononExitReleased(evt);
            }
        });
        headerPanel.add(exitButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 0, 40, 30));

        titleLabel.setFont(new java.awt.Font("Segoe UI", 0, 32)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("Filter Chooser");
        titleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        headerPanel.add(titleLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, -1, -1));

        mainPanel.setBackground(new java.awt.Color(250, 250, 250));
        mainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(1, 198, 83), 2));
        mainPanel.setForeground(new java.awt.Color(255, 255, 255));

        topPanel.setBackground(new java.awt.Color(250, 250, 250));
        topPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(1, 198, 83)));

        upperCheckbox.setBackground(new java.awt.Color(250, 250, 250));
        upperCheckbox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        upperCheckbox.setText("Upper");
        upperCheckbox.setIconTextGap(10);

        javax.swing.GroupLayout topPanelLayout = new javax.swing.GroupLayout(topPanel);
        topPanel.setLayout(topPanelLayout);
        topPanelLayout.setHorizontalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(upperCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        topPanelLayout.setVerticalGroup(
            topPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(upperCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        midPanel.setBackground(new java.awt.Color(250, 250, 250));
        midPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(1, 198, 83)));

        positiveCheckbox.setBackground(new java.awt.Color(250, 250, 250));
        positiveCheckbox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        positiveCheckbox.setText("Positive");
        positiveCheckbox.setIconTextGap(10);

        negativeCheckbox.setBackground(new java.awt.Color(250, 250, 250));
        negativeCheckbox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        negativeCheckbox.setText("Negative");
        negativeCheckbox.setIconTextGap(10);

        javax.swing.GroupLayout midPanelLayout = new javax.swing.GroupLayout(midPanel);
        midPanel.setLayout(midPanelLayout);
        midPanelLayout.setHorizontalGroup(
            midPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(midPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(positiveCheckbox)
                .addGap(10, 10, 10)
                .addComponent(negativeCheckbox)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        midPanelLayout.setVerticalGroup(
            midPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(midPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(midPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(positiveCheckbox)
                    .addComponent(negativeCheckbox))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bottomPanel.setBackground(new java.awt.Color(250, 250, 250));
        bottomPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(1, 198, 83)));

        superiorCheckbox.setBackground(new java.awt.Color(250, 250, 250));
        superiorCheckbox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        superiorCheckbox.setText("Superior");
        superiorCheckbox.setIconTextGap(10);

        equalCheckbox.setBackground(new java.awt.Color(250, 250, 250));
        equalCheckbox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        equalCheckbox.setText("Equal");
        equalCheckbox.setIconTextGap(10);

        inferiorCheckbox.setBackground(new java.awt.Color(250, 250, 250));
        inferiorCheckbox.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        inferiorCheckbox.setText("Infeiror");
        inferiorCheckbox.setIconTextGap(10);

        parameterText.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        parameterLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        parameterLabel.setText("Parameter");

        comparisonSeparator.setForeground(new java.awt.Color(1, 198, 83));

        javax.swing.GroupLayout bottomPanelLayout = new javax.swing.GroupLayout(bottomPanel);
        bottomPanel.setLayout(bottomPanelLayout);
        bottomPanelLayout.setHorizontalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(comparisonSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(bottomPanelLayout.createSequentialGroup()
                        .addComponent(superiorCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(equalCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(inferiorCheckbox)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(bottomPanelLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(parameterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(parameterText, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        bottomPanelLayout.setVerticalGroup(
            bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bottomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(superiorCheckbox)
                    .addComponent(equalCheckbox)
                    .addComponent(inferiorCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
                .addComponent(comparisonSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(parameterText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(parameterLabel))
                .addGap(7, 7, 7))
        );

        confirmButton.setBackground(new java.awt.Color(1, 198, 83));
        confirmButton.setFont(new java.awt.Font("Segoe UI Semibold", 0, 16)); // NOI18N
        confirmButton.setForeground(new java.awt.Color(255, 255, 255));
        confirmButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        confirmButton.setText("CONFIRM");
        confirmButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        confirmButton.setOpaque(true);
        confirmButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                onConfirmClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                onConfirmPressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                onConfirmReleased(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bottomPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(midPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(topPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(75, 75, 75)
                .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(topPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(midPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bottomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(headerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(headerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtononExitClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtononExitClicked
        filterPresenter.onExitClicked();
    }//GEN-LAST:event_exitButtononExitClicked

    private void exitButtononExitPressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtononExitPressed
        filterPresenter.onExitPressed();
    }//GEN-LAST:event_exitButtononExitPressed

    private void exitButtononExitReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_exitButtononExitReleased
        filterPresenter.onExitReleased();
    }//GEN-LAST:event_exitButtononExitReleased

    private void onHeaderPressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onHeaderPressed
        filterPresenter.onHeaderPressed(evt.getX(), evt.getY());
    }//GEN-LAST:event_onHeaderPressed

    private void onHeaderDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onHeaderDragged
        filterPresenter.onHeaderDragged(evt.getXOnScreen(), evt.getYOnScreen());
    }//GEN-LAST:event_onHeaderDragged

    private void onConfirmClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onConfirmClicked
        filterPresenter.onConfirmClicked();
    }//GEN-LAST:event_onConfirmClicked

    private void onConfirmPressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onConfirmPressed
        filterPresenter.onConfirmPressed();
    }//GEN-LAST:event_onConfirmPressed

    private void onConfirmReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onConfirmReleased
        filterPresenter.onConfirmReleased();
    }//GEN-LAST:event_onConfirmReleased

    @Override
    public void setPresenter(IFilterPresenter filterPresenter) {
        this.filterPresenter = filterPresenter;
        this.filterPresenter.onWindowLoad();
    }

    @Override
    public void showMessageDialog(String message) {
        JOptionPane.showMessageDialog(this, message);
    }
    
    @Override
    public void closeWindow() {
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }

    @Override
    public void setExitColor() {
        exitButton.setBackground(new Color(0, 150, 62));
    }

    @Override
    public void resetExitColor() {
        exitButton.setBackground(new Color(1, 198, 83));
    }
    
    @Override
    public void setWindowPressedCoordinates(int x, int y) {
        xx = x;
        yy = y;
    }

    @Override
    public void setWindowDraggedCoordinates(int x, int y) {
        this.x = x;
        this.y = y;
    }

    @Override
    public void setWindowLocation(int x, int y) {
        this.setLocation(x, y);
    }
    
    @Override
    public int getXX() {
        return xx;
    }

    @Override
    public int getYY() {
        return yy;
    }

    @Override
    public int getX() {
        return x;
    }

    @Override
    public int getY() {
        return y;
    }
    
    @Override
    public void setConfirmColor() {
        confirmButton.setBackground(new Color(0, 150, 62));
    }

    @Override
    public void resetConfirmColor() {
        confirmButton.setBackground(new Color(1, 198, 83));
    }
    
    @Override
    public boolean isNegativeSelected() {
        return negativeCheckbox.isSelected();
    }

    @Override
    public boolean isPositiveSelected() {
        return positiveCheckbox.isSelected();
    }

    @Override
    public boolean isSuperiorSelected() {
        return superiorCheckbox.isSelected();
    }

    @Override
    public boolean isEqualSelected() {
        return equalCheckbox.isSelected();
    }

    @Override
    public boolean isInferiorSelected() {
        return inferiorCheckbox.isSelected();
    }

    @Override
    public void deselectNegative() {
        negativeCheckbox.setSelected(false);
    }

    @Override
    public void deselectPositive() {
        positiveCheckbox.setSelected(false);
    }

    @Override
    public void deselectSuperior() {
        superiorCheckbox.setSelected(false);
    }

    @Override
    public void deselectEqual() {
        equalCheckbox.setSelected(false);
    }

    @Override
    public void deselectInferior() {
        inferiorCheckbox.setSelected(false);
    }
    
    @Override
    public void selectUpper() {
        upperCheckbox.setSelected(true);
    }
    
    @Override
    public void selectNegative() {
        negativeCheckbox.setSelected(true);
    }

    @Override
    public void selectPositive() {
        positiveCheckbox.setSelected(true);
    }

    @Override
    public void selectSuperior() {
        superiorCheckbox.setSelected(true);
    }

    @Override
    public void selectEqual() {
        equalCheckbox.setSelected(true);
    }

    @Override
    public void selectInferior() {
        inferiorCheckbox.setSelected(true);
    }
    
    @Override
    public String getParameterText() {
        return parameterText.getText();
    }

    @Override
    public void SetParameterText(String text) {
        parameterText.setText(text);
    }
    
    @Override
    public void setParamaterTextEditable() {
        parameterText.setEditable(true);
    }

    @Override
    public void setParamaterTextNotEditable() {
        parameterText.setEditable(false);
    }
    
    @Override
    public void setWindowLoading(boolean windowLoading) {
        this.windowLoading = windowLoading;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JSeparator comparisonSeparator;
    private javax.swing.JLabel confirmButton;
    private javax.swing.JCheckBox equalCheckbox;
    private javax.swing.JLabel exitButton;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JCheckBox inferiorCheckbox;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel midPanel;
    private javax.swing.JCheckBox negativeCheckbox;
    private javax.swing.JLabel parameterLabel;
    private javax.swing.JTextField parameterText;
    private javax.swing.JCheckBox positiveCheckbox;
    private javax.swing.JCheckBox superiorCheckbox;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JCheckBox upperCheckbox;
    // End of variables declaration//GEN-END:variables

}
